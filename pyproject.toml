[project]
name = "video-summary-bot"
version = "0.1.0"
description = "Automated YouTube video summarizer and financial news digest bot for Telegram"
authors = [
    {name = "Tu Nombre", email = "tu@email.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["telegram", "youtube", "finance", "bot", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core dependencies
    "schedule>=1.2.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    # YouTube and Google APIs
    "youtube-transcript-api>=0.6.1",
    "google-api-python-client>=2.108.0",
    "google-generativeai>=0.3.1",
    # Financial data
    "yfinance>=0.2.20",
    "feedparser>=6.0.10",
    # Logging and monitoring
    "colorlog>=6.7.0",
    # Optional: For system monitoring
    "psutil>=5.9.6",
    "dotenv>=0.9.9",
]

[project.optional-dependencies]
dev = [
    # Development and testing
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "black>=23.9.1",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

docker = [
    # Docker-specific dependencies
    "gunicorn>=21.2.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/youtube-telegram-bot"
Repository = "https://github.com/yourusername/youtube-telegram-bot"
Issues = "https://github.com/yourusername/youtube-telegram-bot/issues"

[project.scripts]
youtube-bot = "src.bot:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".env"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
